#!/usr/bin/env node

var program = require('commander');
var prettyjson = require('prettyjson');
var assign = require('object-assign');
var fs = require('fs');
var chalk = require('chalk');
var debug = require('debug')('dozer:cli');
var client = require('../lib/client');

program
  .command('get <uri>')
  .alias('find')
  .description('Send GET request to dozer server')
  .option('-t, --token <token>', 'Token for authenticating to the server')
  .option('-q, --query <query>', 'Query used to filter results')
  .option('-f, --fields <fields>', 'Specify which fields to include/exclude in results')
  .option('-l, --limit <limit>', 'Specify the limit for the number of documents returned')
  .option('-s, --sort <sort>', 'Specify the sort order for the results')
  .option('-i, --skip <skip>', 'Specify the number of documents to skip in the results')
  .option('-c, --count', 'Return the count of documents found by the query')
  .option('-o, --one', 'Return only one document when querying a collection')
  .option('--json', 'Display the results as JSON')
  .option('--deflate', 'Should the results be deflated using MongoDB enhanced JSON')
  .action(function (uri, program) {
    var options = assign(
      { deflate: false },
      {
        token: program.token,
        query: program.query,
        fields: program.fields,
        limit: program.limit,
        sort: program.sort,
        skip: program.skip,
        count: program.count,
        one: program.one,
        deflate: program.deflate
      }
    );
    client.get(uri, options)
      .then(function (obj) {
        if (program.json) {
          console.log('%j', obj);
        } else {
          console.log(prettyjson.render(obj));
        }
      })
      .catch(function (err) {
        return console.log(chalk.red('ERROR [%s]') + ' %s', err.statusCode, err.message);
      });
  });

program
  .command('post <uri>')
  .alias('insert')
  .description('Send POST request to dozer server')
  .option('-t, --token <token>', 'Token for authenticating to the server')
  .option('-d, --doc <doc>', 'Specify the document(s) to post')
  .option('-f, --file <file>', 'Specify the local file to post as the document(s)')
  .option('-e, --enc <enc>', 'Specify the encoding of the file to post')
  .option('--json', 'Display the results as JSON')
  .option('--deflate', 'Should the results be deflated using MongoDB enhanced JSON')
  .action(function (uri, program) {
    var body = undefined;
    if (program.doc) {
      body = program.doc;
    } else if (program.file) {
      var enc = program.enc || 'utf8';
      body = fs.readFileSync(program.file, { encoding: enc });
    } else {
      console.log(chalk.red('ERROR') + ' either options -d or -f are required');
      return;
    }
    var options = assign(
      { deflate: false },
      {
        token: program.token,
        deflate: program.deflate
      }
    );
    client.post(uri, body, options)
      .then(function (obj) {
        if (program.json) {
          console.log('%j', obj);
        } else {
          console.log(prettyjson.render(obj));
        }
      })
      .catch(function (err) {
        return console.log(chalk.red('ERROR [%s]') + ' %s', err.statusCode, err.message);
      });
  });

program
  .command('put <uri>')
  .alias('update')
  .description('Send PUT request to dozer server')
  .option('-t, --token <token>', 'Token for authenticating to the server')
  .option('-q, --query <query>', 'Query used to filter results')
  .option('-u, --update <update>', 'The update operations to be applied')
  .option('-m, --multiple', 'Specify to update multiple documets')
  .option('--upsert', 'Specify to insert documents if not found')
  .option('--json', 'Display the results as JSON')
  .option('--deflate', 'Should the results be deflated using MongoDB enhanced JSON')
  .action(function (uri, program) {
    var options = assign(
      { deflate: false },
      {
        token: program.token,
        query: program.query,
        multiple: program.multiple,
        upsert: program.upsert,
        deflate: program.deflate
      }
    );
    var body = program.update;
    client.put(uri, body, options)
      .then(function (obj) {
        if (program.json) {
          console.log('%j', obj);
        } else {
          console.log(prettyjson.render(obj));
        }
      })
      .catch(function (err) {
        return console.log(chalk.red('ERROR [%s]') + ' %s', err.statusCode, err.message);
      });
  });

program
  .command('delete <uri>')
  .alias('del')
  .description('Send DELETE request to dozer server')
  .option('-t, --token <token>', 'Token for authenticating to the server')
  .option('-q, --query <query>', 'Query used to filter results')
  .option('-m, --multiple', 'Specify to update multiple documets')
  .option('--json', 'Display the results as JSON')
  .option('--deflate', 'Should the results be deflated using MongoDB enhanced JSON')
  .action(function (uri, program) {
    var options = assign(
      { deflate: false },
      {
        token: program.token,
        query: program.query,
        multiple: program.multiple,
        deflate: program.deflate
      }
    );
    client.del(uri, options)
      .then(function (obj) {
        if (program.json) {
          console.log('%j', obj);
        } else {
          console.log(prettyjson.render(obj));
        }
      })
      .catch(function (err) {
        return console.log(chalk.red('ERROR [%s]') + ' %s', err.statusCode, err.message);
      });
  });


program.parse(process.argv);
